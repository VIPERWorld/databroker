// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Broker {
class ControlCommandArgumentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlCommandArguments> {
} _ControlCommandArguments_default_instance_;
class ControlCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlCommand> {
} _ControlCommand_default_instance_;

namespace protobuf_control_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, data_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, data_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, data_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommandArguments, data_string_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, reply_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, desitination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCommand, args_),
  1,
  ~0u,
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(ControlCommandArguments)},
  { 14, 22, sizeof(ControlCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControlCommandArguments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControlCommand_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "control.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ControlCommandArguments_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ControlCommand_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ControlCommandArguments_default_instance_.DefaultConstruct();
  _ControlCommand_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rcontrol.proto\022\006Broker\"\237\001\n\027ControlComma"
      "ndArguments\0223\n\tdata_type\030\001 \002(\0162\024.Broker."
      "ArgumentType:\nCTRL_INT32\022\022\n\ndata_int32\030\002"
      " \001(\005\022\023\n\013data_double\030\003 \001(\001\022\021\n\tdata_bool\030\004"
      " \001(\010\022\023\n\013data_string\030\005 \001(\t\"\205\001\n\016ControlCom"
      "mand\022\035\n\016reply_required\030\001 \002(\010:\005false\022\024\n\014d"
      "esitination\030\002 \003(\t\022\017\n\007command\030\003 \002(\t\022-\n\004ar"
      "gs\030\004 \003(\0132\037.Broker.ControlCommandArgument"
      "s*R\n\014ArgumentType\022\016\n\nCTRL_INT32\020\000\022\017\n\013CTR"
      "L_DOUBLE\020\001\022\020\n\014CTRL_BOOLEAN\020\002\022\017\n\013CTRL_STR"
      "ING\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_control_2eproto

const ::google::protobuf::EnumDescriptor* ArgumentType_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[0];
}
bool ArgumentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommandArguments::kDataTypeFieldNumber;
const int ControlCommandArguments::kDataInt32FieldNumber;
const int ControlCommandArguments::kDataDoubleFieldNumber;
const int ControlCommandArguments::kDataBoolFieldNumber;
const int ControlCommandArguments::kDataStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommandArguments::ControlCommandArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Broker.ControlCommandArguments)
}
ControlCommandArguments::ControlCommandArguments(const ControlCommandArguments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_string()) {
    data_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_string_);
  }
  ::memcpy(&data_type_, &from.data_type_,
    reinterpret_cast<char*>(&data_bool_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(data_bool_));
  // @@protoc_insertion_point(copy_constructor:Broker.ControlCommandArguments)
}

void ControlCommandArguments::SharedCtor() {
  _cached_size_ = 0;
  data_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, reinterpret_cast<char*>(&data_bool_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(data_bool_));
}

ControlCommandArguments::~ControlCommandArguments() {
  // @@protoc_insertion_point(destructor:Broker.ControlCommandArguments)
  SharedDtor();
}

void ControlCommandArguments::SharedDtor() {
  data_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControlCommandArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommandArguments::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[0].descriptor;
}

const ControlCommandArguments& ControlCommandArguments::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlCommandArguments* ControlCommandArguments::New(::google::protobuf::Arena* arena) const {
  ControlCommandArguments* n = new ControlCommandArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCommandArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:Broker.ControlCommandArguments)
  if (has_data_string()) {
    GOOGLE_DCHECK(!data_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&data_type_, 0, reinterpret_cast<char*>(&data_bool_) -
      reinterpret_cast<char*>(&data_type_) + sizeof(data_bool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlCommandArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Broker.ControlCommandArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Broker::ArgumentType_IsValid(value)) {
            set_data_type(static_cast< ::Broker::ArgumentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_int32 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_data_int32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double data_double = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u)) {
          set_has_data_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool data_bool = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_data_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_string = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_string().data(), this->data_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Broker.ControlCommandArguments.data_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Broker.ControlCommandArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Broker.ControlCommandArguments)
  return false;
#undef DO_
}

void ControlCommandArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Broker.ControlCommandArguments)
  // required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // optional int32 data_int32 = 2;
  if (has_data_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_int32(), output);
  }

  // optional double data_double = 3;
  if (has_data_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->data_double(), output);
  }

  // optional bool data_bool = 4;
  if (has_data_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->data_bool(), output);
  }

  // optional string data_string = 5;
  if (has_data_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_string().data(), this->data_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommandArguments.data_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Broker.ControlCommandArguments)
}

::google::protobuf::uint8* ControlCommandArguments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Broker.ControlCommandArguments)
  // required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // optional int32 data_int32 = 2;
  if (has_data_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_int32(), target);
  }

  // optional double data_double = 3;
  if (has_data_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->data_double(), target);
  }

  // optional bool data_bool = 4;
  if (has_data_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->data_bool(), target);
  }

  // optional string data_string = 5;
  if (has_data_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_string().data(), this->data_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommandArguments.data_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Broker.ControlCommandArguments)
  return target;
}

size_t ControlCommandArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Broker.ControlCommandArguments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
  if (has_data_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }
  // optional string data_string = 5;
  if (has_data_string()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_string());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 data_int32 = 2;
    if (has_data_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_int32());
    }

    // optional double data_double = 3;
    if (has_data_double()) {
      total_size += 1 + 8;
    }

    // optional bool data_bool = 4;
    if (has_data_bool()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommandArguments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Broker.ControlCommandArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommandArguments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommandArguments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Broker.ControlCommandArguments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Broker.ControlCommandArguments)
    MergeFrom(*source);
  }
}

void ControlCommandArguments::MergeFrom(const ControlCommandArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Broker.ControlCommandArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_data_string()) {
      set_has_data_string();
      data_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_string_);
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_data_int32()) {
      set_data_int32(from.data_int32());
    }
    if (from.has_data_double()) {
      set_data_double(from.data_double());
    }
    if (from.has_data_bool()) {
      set_data_bool(from.data_bool());
    }
  }
}

void ControlCommandArguments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Broker.ControlCommandArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommandArguments::CopyFrom(const ControlCommandArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Broker.ControlCommandArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommandArguments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ControlCommandArguments::Swap(ControlCommandArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommandArguments::InternalSwap(ControlCommandArguments* other) {
  data_string_.Swap(&other->data_string_);
  std::swap(data_type_, other->data_type_);
  std::swap(data_int32_, other->data_int32_);
  std::swap(data_double_, other->data_double_);
  std::swap(data_bool_, other->data_bool_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCommandArguments::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCommandArguments

// required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
bool ControlCommandArguments::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlCommandArguments::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlCommandArguments::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlCommandArguments::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
::Broker::ArgumentType ControlCommandArguments::data_type() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_type)
  return static_cast< ::Broker::ArgumentType >(data_type_);
}
void ControlCommandArguments::set_data_type(::Broker::ArgumentType value) {
  assert(::Broker::ArgumentType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_type)
}

// optional int32 data_int32 = 2;
bool ControlCommandArguments::has_data_int32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlCommandArguments::set_has_data_int32() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlCommandArguments::clear_has_data_int32() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCommandArguments::clear_data_int32() {
  data_int32_ = 0;
  clear_has_data_int32();
}
::google::protobuf::int32 ControlCommandArguments::data_int32() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_int32)
  return data_int32_;
}
void ControlCommandArguments::set_data_int32(::google::protobuf::int32 value) {
  set_has_data_int32();
  data_int32_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_int32)
}

// optional double data_double = 3;
bool ControlCommandArguments::has_data_double() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ControlCommandArguments::set_has_data_double() {
  _has_bits_[0] |= 0x00000008u;
}
void ControlCommandArguments::clear_has_data_double() {
  _has_bits_[0] &= ~0x00000008u;
}
void ControlCommandArguments::clear_data_double() {
  data_double_ = 0;
  clear_has_data_double();
}
double ControlCommandArguments::data_double() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_double)
  return data_double_;
}
void ControlCommandArguments::set_data_double(double value) {
  set_has_data_double();
  data_double_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_double)
}

// optional bool data_bool = 4;
bool ControlCommandArguments::has_data_bool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ControlCommandArguments::set_has_data_bool() {
  _has_bits_[0] |= 0x00000010u;
}
void ControlCommandArguments::clear_has_data_bool() {
  _has_bits_[0] &= ~0x00000010u;
}
void ControlCommandArguments::clear_data_bool() {
  data_bool_ = false;
  clear_has_data_bool();
}
bool ControlCommandArguments::data_bool() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_bool)
  return data_bool_;
}
void ControlCommandArguments::set_data_bool(bool value) {
  set_has_data_bool();
  data_bool_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_bool)
}

// optional string data_string = 5;
bool ControlCommandArguments::has_data_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlCommandArguments::set_has_data_string() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlCommandArguments::clear_has_data_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommandArguments::clear_data_string() {
  data_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_string();
}
const ::std::string& ControlCommandArguments::data_string() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_string)
  return data_string_.GetNoArena();
}
void ControlCommandArguments::set_data_string(const ::std::string& value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_string)
}
#if LANG_CXX11
void ControlCommandArguments::set_data_string(::std::string&& value) {
  set_has_data_string();
  data_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.ControlCommandArguments.data_string)
}
#endif
void ControlCommandArguments::set_data_string(const char* value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommandArguments.data_string)
}
void ControlCommandArguments::set_data_string(const char* value, size_t size) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommandArguments.data_string)
}
::std::string* ControlCommandArguments::mutable_data_string() {
  set_has_data_string();
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommandArguments.data_string)
  return data_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ControlCommandArguments::release_data_string() {
  // @@protoc_insertion_point(field_release:Broker.ControlCommandArguments.data_string)
  clear_has_data_string();
  return data_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlCommandArguments::set_allocated_data_string(::std::string* data_string) {
  if (data_string != NULL) {
    set_has_data_string();
  } else {
    clear_has_data_string();
  }
  data_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_string);
  // @@protoc_insertion_point(field_set_allocated:Broker.ControlCommandArguments.data_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kReplyRequiredFieldNumber;
const int ControlCommand::kDesitinationFieldNumber;
const int ControlCommand::kCommandFieldNumber;
const int ControlCommand::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Broker.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      desitination_(from.desitination_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command()) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  reply_required_ = from.reply_required_;
  // @@protoc_insertion_point(copy_constructor:Broker.ControlCommand)
}

void ControlCommand::SharedCtor() {
  _cached_size_ = 0;
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reply_required_ = false;
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:Broker.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[1].descriptor;
}

const ControlCommand& ControlCommand::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlCommand* ControlCommand::New(::google::protobuf::Arena* arena) const {
  ControlCommand* n = new ControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Broker.ControlCommand)
  desitination_.Clear();
  args_.Clear();
  if (has_command()) {
    GOOGLE_DCHECK(!command_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*command_.UnsafeRawStringPointer())->clear();
  }
  reply_required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Broker.ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool reply_required = 1 [default = false];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_reply_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string desitination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desitination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desitination(this->desitination_size() - 1).data(),
            this->desitination(this->desitination_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Broker.ControlCommand.desitination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string command = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Broker.ControlCommand.command");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Broker.ControlCommandArguments args = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Broker.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Broker.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Broker.ControlCommand)
  // required bool reply_required = 1 [default = false];
  if (has_reply_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reply_required(), output);
  }

  // repeated string desitination = 2;
  for (int i = 0, n = this->desitination_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desitination(i).data(), this->desitination(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommand.desitination");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desitination(i), output);
  }

  // required string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommand.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->command(), output);
  }

  // repeated .Broker.ControlCommandArguments args = 4;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->args(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Broker.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Broker.ControlCommand)
  // required bool reply_required = 1 [default = false];
  if (has_reply_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reply_required(), target);
  }

  // repeated string desitination = 2;
  for (int i = 0, n = this->desitination_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desitination(i).data(), this->desitination(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommand.desitination");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->desitination(i), target);
  }

  // required string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Broker.ControlCommand.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command(), target);
  }

  // repeated .Broker.ControlCommandArguments args = 4;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->args(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Broker.ControlCommand)
  return target;
}

size_t ControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Broker.ControlCommand)
  size_t total_size = 0;

  if (has_command()) {
    // required string command = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  if (has_reply_required()) {
    // required bool reply_required = 1 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Broker.ControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string command = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());

    // required bool reply_required = 1 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string desitination = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->desitination_size());
  for (int i = 0, n = this->desitination_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desitination(i));
  }

  // repeated .Broker.ControlCommandArguments args = 4;
  {
    unsigned int count = this->args_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Broker.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Broker.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Broker.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Broker.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desitination_.MergeFrom(from.desitination_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_command()) {
      set_has_command();
      command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (from.has_reply_required()) {
      set_reply_required(from.reply_required());
    }
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Broker.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Broker.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->args())) return false;
  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  desitination_.UnsafeArenaSwap(&other->desitination_);
  args_.UnsafeArenaSwap(&other->args_);
  command_.Swap(&other->command_);
  std::swap(reply_required_, other->reply_required_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCommand

// required bool reply_required = 1 [default = false];
bool ControlCommand::has_reply_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlCommand::set_has_reply_required() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlCommand::clear_has_reply_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlCommand::clear_reply_required() {
  reply_required_ = false;
  clear_has_reply_required();
}
bool ControlCommand::reply_required() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.reply_required)
  return reply_required_;
}
void ControlCommand::set_reply_required(bool value) {
  set_has_reply_required();
  reply_required_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.reply_required)
}

// repeated string desitination = 2;
int ControlCommand::desitination_size() const {
  return desitination_.size();
}
void ControlCommand::clear_desitination() {
  desitination_.Clear();
}
const ::std::string& ControlCommand::desitination(int index) const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.desitination)
  return desitination_.Get(index);
}
::std::string* ControlCommand::mutable_desitination(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.desitination)
  return desitination_.Mutable(index);
}
void ControlCommand::set_desitination(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.desitination)
  desitination_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ControlCommand::set_desitination(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.desitination)
  desitination_.Mutable(index)->assign(std::move(value));
}
#endif
void ControlCommand::set_desitination(int index, const char* value) {
  desitination_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommand.desitination)
}
void ControlCommand::set_desitination(int index, const char* value, size_t size) {
  desitination_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommand.desitination)
}
::std::string* ControlCommand::add_desitination() {
  // @@protoc_insertion_point(field_add_mutable:Broker.ControlCommand.desitination)
  return desitination_.Add();
}
void ControlCommand::add_desitination(const ::std::string& value) {
  desitination_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.desitination)
}
#if LANG_CXX11
void ControlCommand::add_desitination(::std::string&& value) {
  desitination_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.desitination)
}
#endif
void ControlCommand::add_desitination(const char* value) {
  desitination_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Broker.ControlCommand.desitination)
}
void ControlCommand::add_desitination(const char* value, size_t size) {
  desitination_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Broker.ControlCommand.desitination)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControlCommand::desitination() const {
  // @@protoc_insertion_point(field_list:Broker.ControlCommand.desitination)
  return desitination_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ControlCommand::mutable_desitination() {
  // @@protoc_insertion_point(field_mutable_list:Broker.ControlCommand.desitination)
  return &desitination_;
}

// required string command = 3;
bool ControlCommand::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlCommand::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
const ::std::string& ControlCommand::command() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.command)
  return command_.GetNoArena();
}
void ControlCommand::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.command)
}
#if LANG_CXX11
void ControlCommand::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.ControlCommand.command)
}
#endif
void ControlCommand::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommand.command)
}
void ControlCommand::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommand.command)
}
::std::string* ControlCommand::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ControlCommand::release_command() {
  // @@protoc_insertion_point(field_release:Broker.ControlCommand.command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlCommand::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:Broker.ControlCommand.command)
}

// repeated .Broker.ControlCommandArguments args = 4;
int ControlCommand::args_size() const {
  return args_.size();
}
void ControlCommand::clear_args() {
  args_.Clear();
}
const ::Broker::ControlCommandArguments& ControlCommand::args(int index) const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.args)
  return args_.Get(index);
}
::Broker::ControlCommandArguments* ControlCommand::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.args)
  return args_.Mutable(index);
}
::Broker::ControlCommandArguments* ControlCommand::add_args() {
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.args)
  return args_.Add();
}
::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >*
ControlCommand::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Broker.ControlCommand.args)
  return &args_;
}
const ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >&
ControlCommand::args() const {
  // @@protoc_insertion_point(field_list:Broker.ControlCommand.args)
  return args_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Broker

// @@protoc_insertion_point(global_scope)
