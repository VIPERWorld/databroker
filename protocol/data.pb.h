// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Broker {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DataCollection;
class DataCollectionDefaultTypeInternal;
extern DataCollectionDefaultTypeInternal _DataCollection_default_instance_;
class DataDescriptor;
class DataDescriptorDefaultTypeInternal;
extern DataDescriptorDefaultTypeInternal _DataDescriptor_default_instance_;
class DataRegistration;
class DataRegistrationDefaultTypeInternal;
extern DataRegistrationDefaultTypeInternal _DataRegistration_default_instance_;
}  // namespace Broker

namespace Broker {

namespace protobuf_data_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_data_2eproto

enum DataType {
  INT32 = 0,
  DOUBLE = 1,
  BOOLEAN = 2,
  STRING = 3
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = INT32;
const DataType DataType_MAX = STRING;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class DataDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.DataDescriptor) */ {
 public:
  DataDescriptor();
  virtual ~DataDescriptor();

  DataDescriptor(const DataDescriptor& from);

  inline DataDescriptor& operator=(const DataDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataDescriptor& default_instance();

  static inline const DataDescriptor* internal_default_instance() {
    return reinterpret_cast<const DataDescriptor*>(
               &_DataDescriptor_default_instance_);
  }

  void Swap(DataDescriptor* other);

  // implements Message ----------------------------------------------

  inline DataDescriptor* New() const PROTOBUF_FINAL { return New(NULL); }

  DataDescriptor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataDescriptor& from);
  void MergeFrom(const DataDescriptor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data_description = 1;
  bool has_data_description() const;
  void clear_data_description();
  static const int kDataDescriptionFieldNumber = 1;
  const ::std::string& data_description() const;
  void set_data_description(const ::std::string& value);
  #if LANG_CXX11
  void set_data_description(::std::string&& value);
  #endif
  void set_data_description(const char* value);
  void set_data_description(const char* value, size_t size);
  ::std::string* mutable_data_description();
  ::std::string* release_data_description();
  void set_allocated_data_description(::std::string* data_description);

  // required string data_name = 2;
  bool has_data_name() const;
  void clear_data_name();
  static const int kDataNameFieldNumber = 2;
  const ::std::string& data_name() const;
  void set_data_name(const ::std::string& value);
  #if LANG_CXX11
  void set_data_name(::std::string&& value);
  #endif
  void set_data_name(const char* value);
  void set_data_name(const char* value, size_t size);
  ::std::string* mutable_data_name();
  ::std::string* release_data_name();
  void set_allocated_data_name(::std::string* data_name);

  // required string unit = 3;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 3;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // required .Broker.DataType data_type = 4 [default = INT32];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  ::Broker::DataType data_type() const;
  void set_data_type(::Broker::DataType value);

  // @@protoc_insertion_point(class_scope:Broker.DataDescriptor)
 private:
  void set_has_data_description();
  void clear_has_data_description();
  void set_has_data_name();
  void clear_has_data_name();
  void set_has_unit();
  void clear_has_unit();
  void set_has_data_type();
  void clear_has_data_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_description_;
  ::google::protobuf::internal::ArenaStringPtr data_name_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  int data_type_;
  friend struct  protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataRegistration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.DataRegistration) */ {
 public:
  DataRegistration();
  virtual ~DataRegistration();

  DataRegistration(const DataRegistration& from);

  inline DataRegistration& operator=(const DataRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRegistration& default_instance();

  static inline const DataRegistration* internal_default_instance() {
    return reinterpret_cast<const DataRegistration*>(
               &_DataRegistration_default_instance_);
  }

  void Swap(DataRegistration* other);

  // implements Message ----------------------------------------------

  inline DataRegistration* New() const PROTOBUF_FINAL { return New(NULL); }

  DataRegistration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataRegistration& from);
  void MergeFrom(const DataRegistration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Broker.DataDescriptor data_decriptors = 2;
  int data_decriptors_size() const;
  void clear_data_decriptors();
  static const int kDataDecriptorsFieldNumber = 2;
  const ::Broker::DataDescriptor& data_decriptors(int index) const;
  ::Broker::DataDescriptor* mutable_data_decriptors(int index);
  ::Broker::DataDescriptor* add_data_decriptors();
  ::google::protobuf::RepeatedPtrField< ::Broker::DataDescriptor >*
      mutable_data_decriptors();
  const ::google::protobuf::RepeatedPtrField< ::Broker::DataDescriptor >&
      data_decriptors() const;

  // optional string provider_name = 1;
  bool has_provider_name() const;
  void clear_provider_name();
  static const int kProviderNameFieldNumber = 1;
  const ::std::string& provider_name() const;
  void set_provider_name(const ::std::string& value);
  #if LANG_CXX11
  void set_provider_name(::std::string&& value);
  #endif
  void set_provider_name(const char* value);
  void set_provider_name(const char* value, size_t size);
  ::std::string* mutable_provider_name();
  ::std::string* release_provider_name();
  void set_allocated_provider_name(::std::string* provider_name);

  // @@protoc_insertion_point(class_scope:Broker.DataRegistration)
 private:
  void set_has_provider_name();
  void clear_has_provider_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Broker::DataDescriptor > data_decriptors_;
  ::google::protobuf::internal::ArenaStringPtr provider_name_;
  friend struct  protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data_name = 1;
  bool has_data_name() const;
  void clear_data_name();
  static const int kDataNameFieldNumber = 1;
  const ::std::string& data_name() const;
  void set_data_name(const ::std::string& value);
  #if LANG_CXX11
  void set_data_name(::std::string&& value);
  #endif
  void set_data_name(const char* value);
  void set_data_name(const char* value, size_t size);
  ::std::string* mutable_data_name();
  ::std::string* release_data_name();
  void set_allocated_data_name(::std::string* data_name);

  // optional string data_string = 6;
  bool has_data_string() const;
  void clear_data_string();
  static const int kDataStringFieldNumber = 6;
  const ::std::string& data_string() const;
  void set_data_string(const ::std::string& value);
  #if LANG_CXX11
  void set_data_string(::std::string&& value);
  #endif
  void set_data_string(const char* value);
  void set_data_string(const char* value, size_t size);
  ::std::string* mutable_data_string();
  ::std::string* release_data_string();
  void set_allocated_data_string(::std::string* data_string);

  // required .Broker.DataType data_type = 2 [default = INT32];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::Broker::DataType data_type() const;
  void set_data_type(::Broker::DataType value);

  // optional int32 data_int32 = 3;
  bool has_data_int32() const;
  void clear_data_int32();
  static const int kDataInt32FieldNumber = 3;
  ::google::protobuf::int32 data_int32() const;
  void set_data_int32(::google::protobuf::int32 value);

  // optional double data_double = 4;
  bool has_data_double() const;
  void clear_data_double();
  static const int kDataDoubleFieldNumber = 4;
  double data_double() const;
  void set_data_double(double value);

  // optional bool data_bool = 5;
  bool has_data_bool() const;
  void clear_data_bool();
  static const int kDataBoolFieldNumber = 5;
  bool data_bool() const;
  void set_data_bool(bool value);

  // @@protoc_insertion_point(class_scope:Broker.Data)
 private:
  void set_has_data_name();
  void clear_has_data_name();
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_data_int32();
  void clear_has_data_int32();
  void set_has_data_double();
  void clear_has_data_double();
  void set_has_data_bool();
  void clear_has_data_bool();
  void set_has_data_string();
  void clear_has_data_string();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_name_;
  ::google::protobuf::internal::ArenaStringPtr data_string_;
  int data_type_;
  ::google::protobuf::int32 data_int32_;
  double data_double_;
  bool data_bool_;
  friend struct  protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.DataCollection) */ {
 public:
  DataCollection();
  virtual ~DataCollection();

  DataCollection(const DataCollection& from);

  inline DataCollection& operator=(const DataCollection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCollection& default_instance();

  static inline const DataCollection* internal_default_instance() {
    return reinterpret_cast<const DataCollection*>(
               &_DataCollection_default_instance_);
  }

  void Swap(DataCollection* other);

  // implements Message ----------------------------------------------

  inline DataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  DataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataCollection& from);
  void MergeFrom(const DataCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Broker.Data data_provided = 2;
  int data_provided_size() const;
  void clear_data_provided();
  static const int kDataProvidedFieldNumber = 2;
  const ::Broker::Data& data_provided(int index) const;
  ::Broker::Data* mutable_data_provided(int index);
  ::Broker::Data* add_data_provided();
  ::google::protobuf::RepeatedPtrField< ::Broker::Data >*
      mutable_data_provided();
  const ::google::protobuf::RepeatedPtrField< ::Broker::Data >&
      data_provided() const;

  // optional string provider_name = 1;
  bool has_provider_name() const;
  void clear_provider_name();
  static const int kProviderNameFieldNumber = 1;
  const ::std::string& provider_name() const;
  void set_provider_name(const ::std::string& value);
  #if LANG_CXX11
  void set_provider_name(::std::string&& value);
  #endif
  void set_provider_name(const char* value);
  void set_provider_name(const char* value, size_t size);
  ::std::string* mutable_provider_name();
  ::std::string* release_provider_name();
  void set_allocated_provider_name(::std::string* provider_name);

  // @@protoc_insertion_point(class_scope:Broker.DataCollection)
 private:
  void set_has_provider_name();
  void clear_has_provider_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Broker::Data > data_provided_;
  ::google::protobuf::internal::ArenaStringPtr provider_name_;
  friend struct  protobuf_data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DataDescriptor

// optional string data_description = 1;
inline bool DataDescriptor::has_data_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDescriptor::set_has_data_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataDescriptor::clear_has_data_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataDescriptor::clear_data_description() {
  data_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_description();
}
inline const ::std::string& DataDescriptor::data_description() const {
  // @@protoc_insertion_point(field_get:Broker.DataDescriptor.data_description)
  return data_description_.GetNoArena();
}
inline void DataDescriptor::set_data_description(const ::std::string& value) {
  set_has_data_description();
  data_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.DataDescriptor.data_description)
}
#if LANG_CXX11
inline void DataDescriptor::set_data_description(::std::string&& value) {
  set_has_data_description();
  data_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.DataDescriptor.data_description)
}
#endif
inline void DataDescriptor::set_data_description(const char* value) {
  set_has_data_description();
  data_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.DataDescriptor.data_description)
}
inline void DataDescriptor::set_data_description(const char* value, size_t size) {
  set_has_data_description();
  data_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.DataDescriptor.data_description)
}
inline ::std::string* DataDescriptor::mutable_data_description() {
  set_has_data_description();
  // @@protoc_insertion_point(field_mutable:Broker.DataDescriptor.data_description)
  return data_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDescriptor::release_data_description() {
  // @@protoc_insertion_point(field_release:Broker.DataDescriptor.data_description)
  clear_has_data_description();
  return data_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDescriptor::set_allocated_data_description(::std::string* data_description) {
  if (data_description != NULL) {
    set_has_data_description();
  } else {
    clear_has_data_description();
  }
  data_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_description);
  // @@protoc_insertion_point(field_set_allocated:Broker.DataDescriptor.data_description)
}

// required string data_name = 2;
inline bool DataDescriptor::has_data_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDescriptor::set_has_data_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataDescriptor::clear_has_data_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataDescriptor::clear_data_name() {
  data_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_name();
}
inline const ::std::string& DataDescriptor::data_name() const {
  // @@protoc_insertion_point(field_get:Broker.DataDescriptor.data_name)
  return data_name_.GetNoArena();
}
inline void DataDescriptor::set_data_name(const ::std::string& value) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.DataDescriptor.data_name)
}
#if LANG_CXX11
inline void DataDescriptor::set_data_name(::std::string&& value) {
  set_has_data_name();
  data_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.DataDescriptor.data_name)
}
#endif
inline void DataDescriptor::set_data_name(const char* value) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.DataDescriptor.data_name)
}
inline void DataDescriptor::set_data_name(const char* value, size_t size) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.DataDescriptor.data_name)
}
inline ::std::string* DataDescriptor::mutable_data_name() {
  set_has_data_name();
  // @@protoc_insertion_point(field_mutable:Broker.DataDescriptor.data_name)
  return data_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDescriptor::release_data_name() {
  // @@protoc_insertion_point(field_release:Broker.DataDescriptor.data_name)
  clear_has_data_name();
  return data_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDescriptor::set_allocated_data_name(::std::string* data_name) {
  if (data_name != NULL) {
    set_has_data_name();
  } else {
    clear_has_data_name();
  }
  data_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_name);
  // @@protoc_insertion_point(field_set_allocated:Broker.DataDescriptor.data_name)
}

// required string unit = 3;
inline bool DataDescriptor::has_unit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataDescriptor::set_has_unit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataDescriptor::clear_has_unit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataDescriptor::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit();
}
inline const ::std::string& DataDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:Broker.DataDescriptor.unit)
  return unit_.GetNoArena();
}
inline void DataDescriptor::set_unit(const ::std::string& value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.DataDescriptor.unit)
}
#if LANG_CXX11
inline void DataDescriptor::set_unit(::std::string&& value) {
  set_has_unit();
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.DataDescriptor.unit)
}
#endif
inline void DataDescriptor::set_unit(const char* value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.DataDescriptor.unit)
}
inline void DataDescriptor::set_unit(const char* value, size_t size) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.DataDescriptor.unit)
}
inline ::std::string* DataDescriptor::mutable_unit() {
  set_has_unit();
  // @@protoc_insertion_point(field_mutable:Broker.DataDescriptor.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDescriptor::release_unit() {
  // @@protoc_insertion_point(field_release:Broker.DataDescriptor.unit)
  clear_has_unit();
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDescriptor::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:Broker.DataDescriptor.unit)
}

// required .Broker.DataType data_type = 4 [default = INT32];
inline bool DataDescriptor::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataDescriptor::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataDescriptor::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataDescriptor::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::Broker::DataType DataDescriptor::data_type() const {
  // @@protoc_insertion_point(field_get:Broker.DataDescriptor.data_type)
  return static_cast< ::Broker::DataType >(data_type_);
}
inline void DataDescriptor::set_data_type(::Broker::DataType value) {
  assert(::Broker::DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:Broker.DataDescriptor.data_type)
}

// -------------------------------------------------------------------

// DataRegistration

// optional string provider_name = 1;
inline bool DataRegistration::has_provider_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataRegistration::set_has_provider_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataRegistration::clear_has_provider_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataRegistration::clear_provider_name() {
  provider_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_provider_name();
}
inline const ::std::string& DataRegistration::provider_name() const {
  // @@protoc_insertion_point(field_get:Broker.DataRegistration.provider_name)
  return provider_name_.GetNoArena();
}
inline void DataRegistration::set_provider_name(const ::std::string& value) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.DataRegistration.provider_name)
}
#if LANG_CXX11
inline void DataRegistration::set_provider_name(::std::string&& value) {
  set_has_provider_name();
  provider_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.DataRegistration.provider_name)
}
#endif
inline void DataRegistration::set_provider_name(const char* value) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.DataRegistration.provider_name)
}
inline void DataRegistration::set_provider_name(const char* value, size_t size) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.DataRegistration.provider_name)
}
inline ::std::string* DataRegistration::mutable_provider_name() {
  set_has_provider_name();
  // @@protoc_insertion_point(field_mutable:Broker.DataRegistration.provider_name)
  return provider_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRegistration::release_provider_name() {
  // @@protoc_insertion_point(field_release:Broker.DataRegistration.provider_name)
  clear_has_provider_name();
  return provider_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRegistration::set_allocated_provider_name(::std::string* provider_name) {
  if (provider_name != NULL) {
    set_has_provider_name();
  } else {
    clear_has_provider_name();
  }
  provider_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_name);
  // @@protoc_insertion_point(field_set_allocated:Broker.DataRegistration.provider_name)
}

// repeated .Broker.DataDescriptor data_decriptors = 2;
inline int DataRegistration::data_decriptors_size() const {
  return data_decriptors_.size();
}
inline void DataRegistration::clear_data_decriptors() {
  data_decriptors_.Clear();
}
inline const ::Broker::DataDescriptor& DataRegistration::data_decriptors(int index) const {
  // @@protoc_insertion_point(field_get:Broker.DataRegistration.data_decriptors)
  return data_decriptors_.Get(index);
}
inline ::Broker::DataDescriptor* DataRegistration::mutable_data_decriptors(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.DataRegistration.data_decriptors)
  return data_decriptors_.Mutable(index);
}
inline ::Broker::DataDescriptor* DataRegistration::add_data_decriptors() {
  // @@protoc_insertion_point(field_add:Broker.DataRegistration.data_decriptors)
  return data_decriptors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Broker::DataDescriptor >*
DataRegistration::mutable_data_decriptors() {
  // @@protoc_insertion_point(field_mutable_list:Broker.DataRegistration.data_decriptors)
  return &data_decriptors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Broker::DataDescriptor >&
DataRegistration::data_decriptors() const {
  // @@protoc_insertion_point(field_list:Broker.DataRegistration.data_decriptors)
  return data_decriptors_;
}

// -------------------------------------------------------------------

// Data

// required string data_name = 1;
inline bool Data::has_data_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_data_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_data_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_data_name() {
  data_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_name();
}
inline const ::std::string& Data::data_name() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_name)
  return data_name_.GetNoArena();
}
inline void Data::set_data_name(const ::std::string& value) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.Data.data_name)
}
#if LANG_CXX11
inline void Data::set_data_name(::std::string&& value) {
  set_has_data_name();
  data_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.Data.data_name)
}
#endif
inline void Data::set_data_name(const char* value) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.Data.data_name)
}
inline void Data::set_data_name(const char* value, size_t size) {
  set_has_data_name();
  data_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.Data.data_name)
}
inline ::std::string* Data::mutable_data_name() {
  set_has_data_name();
  // @@protoc_insertion_point(field_mutable:Broker.Data.data_name)
  return data_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_data_name() {
  // @@protoc_insertion_point(field_release:Broker.Data.data_name)
  clear_has_data_name();
  return data_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_data_name(::std::string* data_name) {
  if (data_name != NULL) {
    set_has_data_name();
  } else {
    clear_has_data_name();
  }
  data_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_name);
  // @@protoc_insertion_point(field_set_allocated:Broker.Data.data_name)
}

// required .Broker.DataType data_type = 2 [default = INT32];
inline bool Data::has_data_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_data_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::Broker::DataType Data::data_type() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_type)
  return static_cast< ::Broker::DataType >(data_type_);
}
inline void Data::set_data_type(::Broker::DataType value) {
  assert(::Broker::DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:Broker.Data.data_type)
}

// optional int32 data_int32 = 3;
inline bool Data::has_data_int32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_data_int32() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_data_int32() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_data_int32() {
  data_int32_ = 0;
  clear_has_data_int32();
}
inline ::google::protobuf::int32 Data::data_int32() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_int32)
  return data_int32_;
}
inline void Data::set_data_int32(::google::protobuf::int32 value) {
  set_has_data_int32();
  data_int32_ = value;
  // @@protoc_insertion_point(field_set:Broker.Data.data_int32)
}

// optional double data_double = 4;
inline bool Data::has_data_double() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_data_double() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_data_double() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_data_double() {
  data_double_ = 0;
  clear_has_data_double();
}
inline double Data::data_double() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_double)
  return data_double_;
}
inline void Data::set_data_double(double value) {
  set_has_data_double();
  data_double_ = value;
  // @@protoc_insertion_point(field_set:Broker.Data.data_double)
}

// optional bool data_bool = 5;
inline bool Data::has_data_bool() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Data::set_has_data_bool() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Data::clear_has_data_bool() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Data::clear_data_bool() {
  data_bool_ = false;
  clear_has_data_bool();
}
inline bool Data::data_bool() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_bool)
  return data_bool_;
}
inline void Data::set_data_bool(bool value) {
  set_has_data_bool();
  data_bool_ = value;
  // @@protoc_insertion_point(field_set:Broker.Data.data_bool)
}

// optional string data_string = 6;
inline bool Data::has_data_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_data_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_data_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_data_string() {
  data_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_string();
}
inline const ::std::string& Data::data_string() const {
  // @@protoc_insertion_point(field_get:Broker.Data.data_string)
  return data_string_.GetNoArena();
}
inline void Data::set_data_string(const ::std::string& value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.Data.data_string)
}
#if LANG_CXX11
inline void Data::set_data_string(::std::string&& value) {
  set_has_data_string();
  data_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.Data.data_string)
}
#endif
inline void Data::set_data_string(const char* value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.Data.data_string)
}
inline void Data::set_data_string(const char* value, size_t size) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.Data.data_string)
}
inline ::std::string* Data::mutable_data_string() {
  set_has_data_string();
  // @@protoc_insertion_point(field_mutable:Broker.Data.data_string)
  return data_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_data_string() {
  // @@protoc_insertion_point(field_release:Broker.Data.data_string)
  clear_has_data_string();
  return data_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_data_string(::std::string* data_string) {
  if (data_string != NULL) {
    set_has_data_string();
  } else {
    clear_has_data_string();
  }
  data_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_string);
  // @@protoc_insertion_point(field_set_allocated:Broker.Data.data_string)
}

// -------------------------------------------------------------------

// DataCollection

// optional string provider_name = 1;
inline bool DataCollection::has_provider_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCollection::set_has_provider_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCollection::clear_has_provider_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCollection::clear_provider_name() {
  provider_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_provider_name();
}
inline const ::std::string& DataCollection::provider_name() const {
  // @@protoc_insertion_point(field_get:Broker.DataCollection.provider_name)
  return provider_name_.GetNoArena();
}
inline void DataCollection::set_provider_name(const ::std::string& value) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.DataCollection.provider_name)
}
#if LANG_CXX11
inline void DataCollection::set_provider_name(::std::string&& value) {
  set_has_provider_name();
  provider_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.DataCollection.provider_name)
}
#endif
inline void DataCollection::set_provider_name(const char* value) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.DataCollection.provider_name)
}
inline void DataCollection::set_provider_name(const char* value, size_t size) {
  set_has_provider_name();
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.DataCollection.provider_name)
}
inline ::std::string* DataCollection::mutable_provider_name() {
  set_has_provider_name();
  // @@protoc_insertion_point(field_mutable:Broker.DataCollection.provider_name)
  return provider_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataCollection::release_provider_name() {
  // @@protoc_insertion_point(field_release:Broker.DataCollection.provider_name)
  clear_has_provider_name();
  return provider_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataCollection::set_allocated_provider_name(::std::string* provider_name) {
  if (provider_name != NULL) {
    set_has_provider_name();
  } else {
    clear_has_provider_name();
  }
  provider_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_name);
  // @@protoc_insertion_point(field_set_allocated:Broker.DataCollection.provider_name)
}

// repeated .Broker.Data data_provided = 2;
inline int DataCollection::data_provided_size() const {
  return data_provided_.size();
}
inline void DataCollection::clear_data_provided() {
  data_provided_.Clear();
}
inline const ::Broker::Data& DataCollection::data_provided(int index) const {
  // @@protoc_insertion_point(field_get:Broker.DataCollection.data_provided)
  return data_provided_.Get(index);
}
inline ::Broker::Data* DataCollection::mutable_data_provided(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.DataCollection.data_provided)
  return data_provided_.Mutable(index);
}
inline ::Broker::Data* DataCollection::add_data_provided() {
  // @@protoc_insertion_point(field_add:Broker.DataCollection.data_provided)
  return data_provided_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Broker::Data >*
DataCollection::mutable_data_provided() {
  // @@protoc_insertion_point(field_mutable_list:Broker.DataCollection.data_provided)
  return &data_provided_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Broker::Data >&
DataCollection::data_provided() const {
  // @@protoc_insertion_point(field_list:Broker.DataCollection.data_provided)
  return data_provided_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Broker

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Broker::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Broker::DataType>() {
  return ::Broker::DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
