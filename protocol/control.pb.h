// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef PROTOBUF_control_2eproto__INCLUDED
#define PROTOBUF_control_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Broker {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class ControlCommandArguments;
class ControlCommandArgumentsDefaultTypeInternal;
extern ControlCommandArgumentsDefaultTypeInternal _ControlCommandArguments_default_instance_;
}  // namespace Broker

namespace Broker {

namespace protobuf_control_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_control_2eproto

enum ArgumentType {
  CTRL_INT32 = 0,
  CTRL_DOUBLE = 1,
  CTRL_BOOLEAN = 2,
  CTRL_STRING = 3
};
bool ArgumentType_IsValid(int value);
const ArgumentType ArgumentType_MIN = CTRL_INT32;
const ArgumentType ArgumentType_MAX = CTRL_STRING;
const int ArgumentType_ARRAYSIZE = ArgumentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArgumentType_descriptor();
inline const ::std::string& ArgumentType_Name(ArgumentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArgumentType_descriptor(), value);
}
inline bool ArgumentType_Parse(
    const ::std::string& name, ArgumentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArgumentType>(
    ArgumentType_descriptor(), name, value);
}
// ===================================================================

class ControlCommandArguments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.ControlCommandArguments) */ {
 public:
  ControlCommandArguments();
  virtual ~ControlCommandArguments();

  ControlCommandArguments(const ControlCommandArguments& from);

  inline ControlCommandArguments& operator=(const ControlCommandArguments& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommandArguments& default_instance();

  static inline const ControlCommandArguments* internal_default_instance() {
    return reinterpret_cast<const ControlCommandArguments*>(
               &_ControlCommandArguments_default_instance_);
  }

  void Swap(ControlCommandArguments* other);

  // implements Message ----------------------------------------------

  inline ControlCommandArguments* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlCommandArguments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlCommandArguments& from);
  void MergeFrom(const ControlCommandArguments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlCommandArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data_string = 5;
  bool has_data_string() const;
  void clear_data_string();
  static const int kDataStringFieldNumber = 5;
  const ::std::string& data_string() const;
  void set_data_string(const ::std::string& value);
  #if LANG_CXX11
  void set_data_string(::std::string&& value);
  #endif
  void set_data_string(const char* value);
  void set_data_string(const char* value, size_t size);
  ::std::string* mutable_data_string();
  ::std::string* release_data_string();
  void set_allocated_data_string(::std::string* data_string);

  // required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::Broker::ArgumentType data_type() const;
  void set_data_type(::Broker::ArgumentType value);

  // optional int32 data_int32 = 2;
  bool has_data_int32() const;
  void clear_data_int32();
  static const int kDataInt32FieldNumber = 2;
  ::google::protobuf::int32 data_int32() const;
  void set_data_int32(::google::protobuf::int32 value);

  // optional double data_double = 3;
  bool has_data_double() const;
  void clear_data_double();
  static const int kDataDoubleFieldNumber = 3;
  double data_double() const;
  void set_data_double(double value);

  // optional bool data_bool = 4;
  bool has_data_bool() const;
  void clear_data_bool();
  static const int kDataBoolFieldNumber = 4;
  bool data_bool() const;
  void set_data_bool(bool value);

  // @@protoc_insertion_point(class_scope:Broker.ControlCommandArguments)
 private:
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_data_int32();
  void clear_has_data_int32();
  void set_has_data_double();
  void clear_has_data_double();
  void set_has_data_bool();
  void clear_has_data_bool();
  void set_has_data_string();
  void clear_has_data_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_string_;
  int data_type_;
  ::google::protobuf::int32 data_int32_;
  double data_double_;
  bool data_bool_;
  friend struct  protobuf_control_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Broker.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand& default_instance();

  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }

  void Swap(ControlCommand* other);

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string desitination = 2;
  int desitination_size() const;
  void clear_desitination();
  static const int kDesitinationFieldNumber = 2;
  const ::std::string& desitination(int index) const;
  ::std::string* mutable_desitination(int index);
  void set_desitination(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desitination(int index, ::std::string&& value);
  #endif
  void set_desitination(int index, const char* value);
  void set_desitination(int index, const char* value, size_t size);
  ::std::string* add_desitination();
  void add_desitination(const ::std::string& value);
  #if LANG_CXX11
  void add_desitination(::std::string&& value);
  #endif
  void add_desitination(const char* value);
  void add_desitination(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& desitination() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desitination();

  // repeated .Broker.ControlCommandArguments args = 4;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::Broker::ControlCommandArguments& args(int index) const;
  ::Broker::ControlCommandArguments* mutable_args(int index);
  ::Broker::ControlCommandArguments* add_args();
  ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >*
      mutable_args();
  const ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >&
      args() const;

  // required string command = 3;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // required bool reply_required = 1 [default = false];
  bool has_reply_required() const;
  void clear_reply_required();
  static const int kReplyRequiredFieldNumber = 1;
  bool reply_required() const;
  void set_reply_required(bool value);

  // @@protoc_insertion_point(class_scope:Broker.ControlCommand)
 private:
  void set_has_reply_required();
  void clear_has_reply_required();
  void set_has_command();
  void clear_has_command();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desitination_;
  ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments > args_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  bool reply_required_;
  friend struct  protobuf_control_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCommandArguments

// required .Broker.ArgumentType data_type = 1 [default = CTRL_INT32];
inline bool ControlCommandArguments::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlCommandArguments::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlCommandArguments::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlCommandArguments::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::Broker::ArgumentType ControlCommandArguments::data_type() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_type)
  return static_cast< ::Broker::ArgumentType >(data_type_);
}
inline void ControlCommandArguments::set_data_type(::Broker::ArgumentType value) {
  assert(::Broker::ArgumentType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_type)
}

// optional int32 data_int32 = 2;
inline bool ControlCommandArguments::has_data_int32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlCommandArguments::set_has_data_int32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlCommandArguments::clear_has_data_int32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlCommandArguments::clear_data_int32() {
  data_int32_ = 0;
  clear_has_data_int32();
}
inline ::google::protobuf::int32 ControlCommandArguments::data_int32() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_int32)
  return data_int32_;
}
inline void ControlCommandArguments::set_data_int32(::google::protobuf::int32 value) {
  set_has_data_int32();
  data_int32_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_int32)
}

// optional double data_double = 3;
inline bool ControlCommandArguments::has_data_double() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControlCommandArguments::set_has_data_double() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ControlCommandArguments::clear_has_data_double() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ControlCommandArguments::clear_data_double() {
  data_double_ = 0;
  clear_has_data_double();
}
inline double ControlCommandArguments::data_double() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_double)
  return data_double_;
}
inline void ControlCommandArguments::set_data_double(double value) {
  set_has_data_double();
  data_double_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_double)
}

// optional bool data_bool = 4;
inline bool ControlCommandArguments::has_data_bool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControlCommandArguments::set_has_data_bool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ControlCommandArguments::clear_has_data_bool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ControlCommandArguments::clear_data_bool() {
  data_bool_ = false;
  clear_has_data_bool();
}
inline bool ControlCommandArguments::data_bool() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_bool)
  return data_bool_;
}
inline void ControlCommandArguments::set_data_bool(bool value) {
  set_has_data_bool();
  data_bool_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_bool)
}

// optional string data_string = 5;
inline bool ControlCommandArguments::has_data_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlCommandArguments::set_has_data_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlCommandArguments::clear_has_data_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlCommandArguments::clear_data_string() {
  data_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_string();
}
inline const ::std::string& ControlCommandArguments::data_string() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommandArguments.data_string)
  return data_string_.GetNoArena();
}
inline void ControlCommandArguments::set_data_string(const ::std::string& value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.ControlCommandArguments.data_string)
}
#if LANG_CXX11
inline void ControlCommandArguments::set_data_string(::std::string&& value) {
  set_has_data_string();
  data_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.ControlCommandArguments.data_string)
}
#endif
inline void ControlCommandArguments::set_data_string(const char* value) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommandArguments.data_string)
}
inline void ControlCommandArguments::set_data_string(const char* value, size_t size) {
  set_has_data_string();
  data_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommandArguments.data_string)
}
inline ::std::string* ControlCommandArguments::mutable_data_string() {
  set_has_data_string();
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommandArguments.data_string)
  return data_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlCommandArguments::release_data_string() {
  // @@protoc_insertion_point(field_release:Broker.ControlCommandArguments.data_string)
  clear_has_data_string();
  return data_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlCommandArguments::set_allocated_data_string(::std::string* data_string) {
  if (data_string != NULL) {
    set_has_data_string();
  } else {
    clear_has_data_string();
  }
  data_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_string);
  // @@protoc_insertion_point(field_set_allocated:Broker.ControlCommandArguments.data_string)
}

// -------------------------------------------------------------------

// ControlCommand

// required bool reply_required = 1 [default = false];
inline bool ControlCommand::has_reply_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlCommand::set_has_reply_required() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlCommand::clear_has_reply_required() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlCommand::clear_reply_required() {
  reply_required_ = false;
  clear_has_reply_required();
}
inline bool ControlCommand::reply_required() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.reply_required)
  return reply_required_;
}
inline void ControlCommand::set_reply_required(bool value) {
  set_has_reply_required();
  reply_required_ = value;
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.reply_required)
}

// repeated string desitination = 2;
inline int ControlCommand::desitination_size() const {
  return desitination_.size();
}
inline void ControlCommand::clear_desitination() {
  desitination_.Clear();
}
inline const ::std::string& ControlCommand::desitination(int index) const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.desitination)
  return desitination_.Get(index);
}
inline ::std::string* ControlCommand::mutable_desitination(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.desitination)
  return desitination_.Mutable(index);
}
inline void ControlCommand::set_desitination(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.desitination)
  desitination_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ControlCommand::set_desitination(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.desitination)
  desitination_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ControlCommand::set_desitination(int index, const char* value) {
  desitination_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommand.desitination)
}
inline void ControlCommand::set_desitination(int index, const char* value, size_t size) {
  desitination_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommand.desitination)
}
inline ::std::string* ControlCommand::add_desitination() {
  // @@protoc_insertion_point(field_add_mutable:Broker.ControlCommand.desitination)
  return desitination_.Add();
}
inline void ControlCommand::add_desitination(const ::std::string& value) {
  desitination_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.desitination)
}
#if LANG_CXX11
inline void ControlCommand::add_desitination(::std::string&& value) {
  desitination_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.desitination)
}
#endif
inline void ControlCommand::add_desitination(const char* value) {
  desitination_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Broker.ControlCommand.desitination)
}
inline void ControlCommand::add_desitination(const char* value, size_t size) {
  desitination_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Broker.ControlCommand.desitination)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControlCommand::desitination() const {
  // @@protoc_insertion_point(field_list:Broker.ControlCommand.desitination)
  return desitination_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ControlCommand::mutable_desitination() {
  // @@protoc_insertion_point(field_mutable_list:Broker.ControlCommand.desitination)
  return &desitination_;
}

// required string command = 3;
inline bool ControlCommand::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlCommand::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlCommand::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& ControlCommand::command() const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.command)
  return command_.GetNoArena();
}
inline void ControlCommand::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Broker.ControlCommand.command)
}
#if LANG_CXX11
inline void ControlCommand::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Broker.ControlCommand.command)
}
#endif
inline void ControlCommand::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Broker.ControlCommand.command)
}
inline void ControlCommand::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Broker.ControlCommand.command)
}
inline ::std::string* ControlCommand::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlCommand::release_command() {
  // @@protoc_insertion_point(field_release:Broker.ControlCommand.command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlCommand::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:Broker.ControlCommand.command)
}

// repeated .Broker.ControlCommandArguments args = 4;
inline int ControlCommand::args_size() const {
  return args_.size();
}
inline void ControlCommand::clear_args() {
  args_.Clear();
}
inline const ::Broker::ControlCommandArguments& ControlCommand::args(int index) const {
  // @@protoc_insertion_point(field_get:Broker.ControlCommand.args)
  return args_.Get(index);
}
inline ::Broker::ControlCommandArguments* ControlCommand::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Broker.ControlCommand.args)
  return args_.Mutable(index);
}
inline ::Broker::ControlCommandArguments* ControlCommand::add_args() {
  // @@protoc_insertion_point(field_add:Broker.ControlCommand.args)
  return args_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >*
ControlCommand::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Broker.ControlCommand.args)
  return &args_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Broker::ControlCommandArguments >&
ControlCommand::args() const {
  // @@protoc_insertion_point(field_list:Broker.ControlCommand.args)
  return args_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Broker

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Broker::ArgumentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Broker::ArgumentType>() {
  return ::Broker::ArgumentType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2eproto__INCLUDED
